@page "/edit/{Id:int}"
@inject JobApplicationsClient JobApplicationsClient
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject EditJobApplicationState State

@using System.Net.Http.Json;
@using System.Text.Json

<PageTitle>Create Job Application</PageTitle>

<RadzenText TextStyle="TextStyle.DisplayH3">Create Job Application</RadzenText>

@if (_hasError)
{
    <RadzenProblemDetails Problem="_problemDetails" />
}

<RadzenTemplateForm TItem="EditJobApplicationState" Data=@State Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
    <RadzenFieldset Text="Job Application" Data="@State">
        <RadzenStack Gap="1rem">

            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="1">
                    <RadzenLabel Text="Status" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="1">
                    <RadzenBadge BadgeStyle="BadgeStyle.Light" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="10">
                    <RadzenDropDown Data="@_applicationStatuses" @bind-Value="@_applicationStatus" AllowFiltering="true" Style="width:100%; display: block;" />
                </RadzenColumn>
            </RadzenRow>

            <RadzenRow AlignItems="AlignItems.Center">
                <RadzenColumn Size="12" SizeMD="1">
                    <RadzenLabel Text="Notes" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="1">
                    <RadzenBadge BadgeStyle="BadgeStyle.Light" Text="optional" />
                </RadzenColumn>
                <RadzenColumn Size="12" SizeMD="10">
                    <RadzenTextArea Name="Notes" @bind-Value="State.Notes" Rows="5" class="w-100" />
                </RadzenColumn>
            </RadzenRow>
        </RadzenStack>
    </RadzenFieldset>

    <RadzenStack Orientation="Orientation.Horizontal"
                 AlignItems="AlignItems.Start"
                 JustifyContent="JustifyContent.Left"
                 Gap="1rem"
                 Wrap="FlexWrap.Wrap"
                 class="rz-py-6">
        <RadzenButton style="width: 120px" IsBusy=@_isBusy Click=@Cancel Text="Cancel" />
        <RadzenButton ButtonType="ButtonType.Submit" style="width: 120px" Icon="save" BusyText="Saving" IsBusy=@_isBusy Text="Save" />
    </RadzenStack>
</RadzenTemplateForm>

@code {
    [Parameter] public int Id { get; set; }

    bool _isBusy;
    bool _hasError;
    ProblemDetails? _problemDetails;

    string[] _applicationStatuses = Enum.GetNames<ApplicationStatus>();
    string _applicationStatus = "";

    protected override void OnInitialized()
    {
        _applicationStatus = State.Status.ToString();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        Console.WriteLine(args);
    }

    async Task OnSubmit(EditJobApplicationState mode)
    {
        try
        {
            _hasError = false;
            _isBusy = true;

            State.Status = Enum.Parse<ApplicationStatus>(_applicationStatus);

            await JobApplicationsClient.Edit(State);

            NotificationService.Notify(new NotificationMessage
            {
                Severity = NotificationSeverity.Info,
                Summary = "Success",
                Detail = "Job Application Updated"
            });

            NavigationManager.NavigateTo("/");
            return;
        }
        catch (HttpRequestException ex)
        {
            _problemDetails = new ProblemDetails { Title = ex.Message };
        }

        _isBusy = false;
        _hasError = true;
    }
}