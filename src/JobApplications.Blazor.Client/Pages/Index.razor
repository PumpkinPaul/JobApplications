@page "/"
@inject HttpClient HttpClient
@inject NotificationService NotificationService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject EditJobApplicationState State

@using System.Net.Http.Json;
@using System.Text.Json

<PageTitle>Job Applications</PageTitle>

<RadzenText TextStyle="TextStyle.DisplayH3">Job Applications</RadzenText>

@if (hasError)
{
    <RadzenProblemDetails Problem="problemDetails" />
}

<RadzenButton Icon="add_circle_outline"
              Text="Create"
              ButtonStyle="ButtonStyle.Primary"
              class="mb-2"
              Click="@NavigateToCreate" />

<RadzenDataGrid @ref="_grid"
                Data="@jobApplications"
                TItem="JobApplication"
                ColumnWidth="175px"
                AllowFiltering="true"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterMode="FilterMode.Advanced"
                AllowPaging="true"
                AllowSorting="true"
                RowRender="@RowRender"
                ExpandMode="@expandMode"
                Filter="@OnFilter">
    <Template Context="jobApplication">
        <RadzenCard Style="margin-bottom:20px; margin-top: 20px;">
            <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H3">Notes</RadzenText>
            <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P">@jobApplication.Notes</RadzenText>
        </RadzenCard>
    </Template>

    <Columns>
        <RadzenDataGridColumn TItem="JobApplication" Title="Url">
            <Template Context="jobApplication">
                <RadzenLink Path="@jobApplication.Url" Text="@jobApplication.Title" Target="_blank" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="JobApplication" Title="Job Id" Property="JobId" Width="75px">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="JobApplication" Title="Contact" Property="ContactName" Width="150px">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="JobApplication" Title="Telephone" Property="Telephone" Width="125px">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="JobApplication" Title="Applied" Property="AppliedDate" Width="150px">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="JobApplication" Title="Status" Property="Status" Width="75px">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="JobApplication" Context="jobApplication" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="76px">
            <Template Context="jobApplication">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click=@(() => NavigateToEdit(jobApplication.Id)) @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" 
                Click=@(() => ConfirmDelete(jobApplication.Id))
                @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    DataGridExpandMode expandMode = DataGridExpandMode.Single;

    RadzenDataGrid<JobApplication> _grid;

    List<JobApplication> jobApplications = new();

    bool isBusy;
    bool hasError;
    ProblemDetails? problemDetails;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var column = _grid.ColumnsCollection.Where(c => c.Property == "Status").FirstOrDefault();

            if (column != null)
            {
                column.FilterValue = ApplicationStatus.Applied;
                column.FilterOperator = FilterOperator.Equals;
                column.LogicalFilterOperator = LogicalFilterOperator.Or;
                column.SecondFilterValue = ApplicationStatus.AwaitingCall;
                column.SecondFilterOperator = FilterOperator.Equals;
                _grid.Reload();
            }
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    void OnFilter(DataGridColumnFilterEventArgs<JobApplication> args)
    {
    //
    }

    void RowRender(RowRenderEventArgs<JobApplication> args)
    {
        args.Expandable = !string.IsNullOrWhiteSpace(args.Data.Notes);
    }

    protected override async Task OnInitializedAsync()
    {
        jobApplications = ((List<JobApplication>)(await HttpClient.GetFromJsonAsync("https://localhost:7176/api/jobapplication", typeof(List<JobApplication>)) ?? new()));
    }

    void NavigateToCreate()
    {
        NavigationManager.NavigateTo("/create");
    }

    void NavigateToEdit(int id)
    {
        State.Id = id;

        var selectedItem = jobApplications.Single(j => j.Id == id);
        State.Status = selectedItem.Status;
        State.Notes = selectedItem.Notes;

        NavigationManager.NavigateTo("/edit");
    }

    async Task ConfirmDelete(int id)
    {
        var confirm = await DialogService.Confirm("Are you sure you want delete this application?", "Confirm Delete", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
            await DeleteJobApplication(id);
    }

    async Task DeleteJobApplication(int id)
    {
        try
        {
            hasError = false;
            isBusy = true;

            var response = await HttpClient.DeleteAsync($"https://localhost:7176/api/jobapplication/{id}");

            if (response.IsSuccessStatusCode)
            {
                var deleted = jobApplications.FirstOrDefault(job => job.Id == id);
                if (deleted != null)
                    jobApplications.Remove(deleted);

                NotificationService.Notify(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Info,
                        Summary = "Success",
                        Detail = "Job Application Deleted"
                    });

                await _grid.Reload();
                return;
            }

            problemDetails = await JsonSerializer.DeserializeAsync<ProblemDetails>(
                await response.Content.ReadAsStreamAsync(), 
                new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }

        isBusy = false;
        hasError = true;
    }
}